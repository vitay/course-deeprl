{"title":"Monte-Carlo control","markdown":{"headingText":"Monte-Carlo control","containsRefs":false,"markdown":"\n\nWe start by importing gym. The environment we will use is text-based, so there is no need for all the boilerplate of last exercise: we simply pip install gym if we are on Colab.\n\n## The taxi environment\n\nIn this exercise, we are going to apply **on-policy Monte-Carlo control** on the Taxi environment available in gym:\n\n<https://gym.openai.com/envs/Taxi-v3/>\n\nLet's create the environment, initialize it  and render the first state:\n\nThe agent is the yellow square. It can move up, down, left or right if there is no wall (the pipes and dashes). Its goal is to pick clients at the blue location and drop them off at the pink location. These locations are fixed (R, G, B, Y), but which one is the pick-up location and which one is the drop-off destination changes between each episode.\n\n**Q:** Re-run the previous cell multiple times to observe the diversity of initial states.\n\nThe following cell prints the action space of the environment: \n\nThere are 6 discrete actions: south, north, east, west, pickup, dropoff.\n    \nLet's now look at the observation space (state space):\n\nThere are 500 discrete states. What are they?\n\n* The taxi can be anywhere in the 5x5 grid, giving 25 different locations.\n* The passenger can be at any of the four locations R, G, B, Y or in the taxi: 5 values.\n* The destination can be any of the four locations: 4 values.\n\nThis gives indeed 25x5x4 = 500 different combinations.\n\nThe internal representation of a state is a number between 0 and 499. You can use the `encode` and `decode` methods of the environment to relate it to the state variables.\n\nThe reward function is simple:\n\n* r = 20 when delivering the client at the correct location.\n* r = -10 when picking or dropping a client illegally (picking where there is no client, dropping a client somewhere else, etc)\n* r = -1 for all other transitions in order to incent the agent to be as fast as possible.\n\nThe actions pickup and dropoff are very dangerous: take them at the wrong time and your return will be very low. The navigation actions are less critical.\n\nDepending on the initial state, the taxi will need at least 10 steps to deliver the client, so the maximal return you can expect is around 10 (+20 for the success, -1 for all the steps). \n\nThe task is episodic: if you have not delivered the client within 200 steps, the episode stops (no particular reward).\n\n## Random agent\n\nLet's now define a random agent that just samples the action space.\n\n**Q:** Modify the random agent of last time, so that the agent performs a fixed number of **episodes**, not steps. Make sure to use the `done` flag to break the for loop and start in a new state. Optionally render the state of the agent at every step. At the end of each episode, compute its return using $\\gamma = 1.0$ (i.e. simply sum the obtained rewards) and print the list in the end.\n\n*Tip:* If you render the state at every step, they will be printed one after the other. To have an animation, you can clear the output of the cell using:\n\n```python\nfrom IPython.display import clear_output # already imported\n\nfor t in episode: \n    # ...\n    clear_output(wait=True)\n    env.render()\n    # ...\n```\n\n*Tip:* The animation may be too fast to visualize anything. To force the framerate to be low enough, you can make Python \"sleep\" (do nothing) for a few milliseconds after each rendering:\n\n```python\nimport time # already imported\n\nfor t in episode: \n    clear_output(wait=True)\n    env.render()\n    time.sleep(0.1) # sleep for 100 milliseconds\n```\n\n**Q:** What do you think of the returns obtained by the random agent? Conclude on the difficulty of the task.\n\n**A:** the optimal returns are around 10, but the obtained returns with a random policy are very negative (-700, mostly due to many illegal pickups or dropoffs). One can expect a very huge variance of the returns, so learning will be slow.\n\n## On-policy Monte-Carlo control\n\nNow let's apply on-policy MC control on the Taxi environment. As a reminder, here the meta-algorithm:\n\n* **while** True:\n\n    1. Generate an episode $\\tau = (s_0, a_0, r_1, \\ldots, s_T)$ using the current **stochastic** policy $\\pi$.\n\n    2. For each state-action pair $(s_t, a_t)$ in the episode, update the estimated Q-value:\n\n    $$\n        Q(s_t, a_t) = Q(s_t, a_t) + \\alpha \\, (R_t - Q(s_t, a_t))\n    $$\n\n    3. For each state $s_t$ in the episode, improve the policy (e.g. $\\epsilon$-greedy):\n\n    $$\n        \\pi(s_t, a) = \\begin{cases}\n                        1 - \\epsilon \\; \\text{if} \\; a = a^* \\\\\n                        \\frac{\\epsilon}{|\\mathcal{A(s_t)}-1|} \\; \\text{otherwise.} \\\\\n                      \\end{cases}\n    $$\n    \nIn practice, we will need:\n\n* a **Q-table** storing the estimated Q-value of each state-action pair: its size will be (500, 6).\n\n* an $\\epsilon$-greedy action selection to select actions in the current state.\n\n* an learning mechanism allowing to update the Q-value of all state-action pairs encountered in the episode.\n\n**Q:** Create a `MonteCarloAgent` agent implementing on-policy MC for the Taxi environment. Use $\\gamma = 0.9$, $\\epsilon = 0.1$ and $\\alpha=0.01$ (pass these parameters to the constructor of the agent and store them). Train the agent for 20000 episodes (yes, 20000... Start with one episode to debug everything and then launch the simulation. It should take around one minute). Save the return of each episode in a list and plot them in the end. \n\nImplementing the action selection should not be a problem, it is the same as for bandits. Little trick (not obligatory): you can implement $\\epsilon$-greedy as:\n\n```python\naction = self.Q[state, :].argmax()\nif rng.random() < epsilon:\n    action = self.env.action_space.sample()\n```\n\nThis is not exactly $\\epsilon$-greedy, as `env.action_space.sample()` may select the greedy action again. In practice it does not matter, it only changes the meaning of $\\epsilon$, but the action selection stays similar. It is better to rely on `env.action_space.sample()` for the exploration, as some Gym problem work better with a normal distribution for the exploration than with uniform (e.g. continuous problems). \n\nDo not select the greedy action with `self.Q[state, :].argmax()` but `rng.random.choice(np.where(self.Q[state, :] == self.Q[state, :].max())[0])`: at the beginning of learning, where the Q-values are all 0, you would otherwise always take the first action (south).\n\nThe `update()` method should take a complete episode as argument, using a list of (state, action, reward) transitions. It should be called at the end of an episode only, not after every step.\n\nA bit tricky is the calculation of the returns for each visited state. The naive approach would look like:\n\n```python\nT = len(episode)\nfor t in range(T):\n    state, action, reward = episode[t]\n    return_state = 0.0\n    for k in range(t, T): # rewards coming after t\n        next_state, next_action, next_reward = episode[k]\n        return_state += gamma**k * reward\n    self.Q[state, action] += alpha * (return_state - self.Q[state, action])\n```\n\nThe double for loop can be computationally expensive for long episodes (complexity T log T). It is much more efficient to iterate **backwards** on the episode, starting from the last transition and iterating until the first one, and using the fact that:\n\n$$R_{t} = r_{t+1} + \\gamma \\, R_{t+1}$$\n\nThe terminal state $s_T$ has a return of 0 by definition. The last transition $s_{T-1} \\rightarrow s_{T}$ has therefore a return of $R_{T-1} = r_T$. The transition before that has a return of $R_{T-2} = r_{T-1}  + \\gamma \\, R_{T-1}$, and so on. You can then compute the returns of each action taken in the episode (and update its Q-value) in **linear time**.\n\nTo iterate backwards over the list of transitions, use the `reversed()` operator:\n\n```python\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nfor a in reversed(l):\n    print(a)\n```\n\nAs you may observe, the returns have a huge variance due to the exploration, what makes the plot quite ugly and unreadable. The following function allows to smooth the returns using a sliding average over the last $N$ epochs:\n\n**Q:** Plot the returns as well as their sliding average. Comment on the influence of exploration. \n\n**Q:** Extend the agent with a `test(self, render)` method that performs a single episode on the environment without exploration, optionally renders each state but does **not** learn. You will have to re-train the agent, because the definition of its class has changed. Backup the previous value of `epsilon` in a temporary variable and reset it at the end of the episode. Have the method return the **undiscounted** sum of rewards in the episode, as well as the number of steps until termination.\n\nAfter training (you can reduce the number of episodes), first observe a couple of test episodes with rendering on. Is the policy any good?\n\nPerform 1000 test episodes without rendering and report the mean return over these 1000 episodes as the final performance of your agent.\n\n**A:** the agent successfully delivers the client at the correct location. The path is not always the shortest one (especially in the vast area before G), but that is fine.\n\n## Experiments\n\n### Early stopping\n\n**Q:** Train the agent for the smallest number of episodes where the returns seem to have stabilized (e.g. 2000 episodes). Test the agent. Does it work? Why?\n\n**A:** Although the returns are already between -20 and +10, as after 50000 episodes, the greedy policy is not optimal as some states still have a very bad policy (the agent sometimes goes back and forth between two states) or just a bad one (not optimal path). The negative returns at the end of learning are due to the exploration: the agent performs illegal pickups or dropoffs. Early in learning, this is due to bad estimates of the Q-values. The return of an episode is a bad estimate of the performance: it report both the exploration and the exploitation. Unfortunately, it is the only one we have...  \n\n### Discount rate\n\n**Q:** Change the value of the discount factor $\\gamma$. As the task is episodic (maximum 200 steps), try a discount rate of 1. What happens? Conclude.\n\n**A:** Rather tricky question... With a discount factor of 1, the agent does not converge as fast as with gamma = 0.9. This is due to the **variance** of the returns: imagine your episode is optimal all along, but at the last moment, the agent performs an illegal dropoff action. The undiscounted return of the episode will be negative and **all** actions taken during the episode will be punished, although only the last one is responsible for the bad return.\n\nUsing a discount factor < 1 allows the first actions to stop caring about the final rewards, as they are discounted by $\\gamma^T$, which is very small. Take-home message: even if your task is episodic, use $\\gamma < 1$.\n\n### Learning rate\n\n**Q:** Vary the learning rate `alpha`. What happens?\n\n**A:** if the learning rate is too high (0.5), the network does not converge and becomes unstable, as updates \"erases\" very quickly the previous values, what is bad given the high variance of the returns. If the learning rate is too low, learning takes forever. Classical machine learning problem... 0.01 works actually quite well.\n\n### Exploration parameter\n\n**Q:** Vary the exploration parameter `epsilon` and observe its impact on learning.\n\n**A:** The exploration should be at least 0.1 in order to find the optimal policy. 0.2 or 0.3 find a good policy faster, but explore too much at the end of learning.\n\n### Exploration scheduling\n\nEven with a good learning rate (0.01) and a discount factor of 0.9, the exploration parameter as a huge impact on the performance: too low and the agent does not find the optimal policy, too high and the agent is inefficient at the end of learning. \n\n**Q:** Implement scheduling for epsilon. You can use exponential scheduling as in the bandits exercise:\n\n$$\\epsilon = \\epsilon \\times (1 - \\epsilon_\\text{decay})$$\n\nat the end of each episode, with $\\epsilon_\\text{decay}$ being a small decay parameter (`1e-5` or so).\n\nFind a correct value for $\\epsilon_\\text{decay}$. Do not hesitate to fine-tune alpha at the same time.\n\n*Tip:* Prepare and visualize the scheduling in a different cell, and use the initial value of $\\epsilon$ and $\\epsilon_\\text{decay}$ that seem to make sense. \n\n**A:** As seen with bandits, decaying the exploration parameter with the right schedule improves very significantly the speed of learning and the optimality.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../center_images.lua","quarto"],"number-sections":false,"toc":true,"html-math-method":"katex","output-file":"8-MonteCarlo-solution.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.251","bibliography":["../DeepLearning.bib","../ReinforcementLearning.bib"],"csl":"../frontiers.csl","theme":["cosmo","../custom.scss"],"page-layout":"full","number-depth":2,"smooth-scroll":true},"extensions":{"book":{"multiFile":true}}}}}