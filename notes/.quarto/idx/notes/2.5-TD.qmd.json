{"title":"Temporal Difference learning","markdown":{"headingText":"Temporal Difference learning","containsRefs":false,"markdown":"\nSlides: [html](../slides/2.5-TD.html){target=\"_blank\"} [pdf](../slides/pdf/2.5-TD.pdf){target=\"_blank\"}\n\n## Temporal Difference algorithms\n\n{{< youtube  XLB98ZFsy8w >}}\n\nMC methods wait until the end of the episode to compute the obtained return, and update the estimates of all encountered states:\n\n$$\n    V(s_t) = V(s_t) + \\alpha (R_t - V(s_t))\n$$\n\nIf the episode is very long, learning might be very slow. If the task is continuing, it is impossible. Considering that the return at time $t$ is the immediate reward plus the return in the next step:\n\n$$\n    R_t = r_{t+1} + \\gamma \\,  R_{t+1}\n$$\n\nwe could replace $R_{t+1}$ by an estimate, which is the value of the next state $V^\\pi(s_{t+1}) = \\mathbb{E}_\\pi [R_{t+1} | s_{t+1}=s]$:\n\n$$R_t \\approx r_{t+1} + \\gamma \\,  V^\\pi(s_{t+1})$$\n\n**Temporal-Difference (TD)** methods simply replace the actual return by an estimation in the update rule:\n\n$$\n    V(s_t) = V(s_t) + \\alpha \\, (r_{t+1} + \\gamma \\, V(s_{t+1}) - V(s_t))\n$$\n\nwhere $r_{t+1} + \\gamma\\, V(s_{t+1})$ is a sampled estimate of the return.\n\n![TD replaces $R_{t+1}$ with an estimate $V(s_{t+1})$. Adapted from [@Sutton1998]. ](../slides/img/MCTD.svg){width=50%}\n\n\nThe quantity\n\n$$\\delta_t = r_{t+1} + \\gamma \\, V(s_{t+1}) - V(s_t)$$\n\nis called equivalently the **reward prediction error** (RPE), the **TD error** or the **advantage** of the action $a_t$.  It is the difference between the estimated return in state $s_t$ $V(s_t)$ and the actual return $r_{t+1} + \\gamma \\, V(s_{t+1})$, computed with an estimation.\n\nIf $\\delta_t > 0$, it means that we received more reward $r_{t+1}$ than expected, or that we arrived in a state $s_{t+1}$ that is better than expected: we should increase the value of $s_t$ as we **underestimate** it.\nIf $\\delta_t < 0$, we should decrease the value of $s_t$ as we **overestimate** it.\n\n\nThe learning procedure in TD is then possible after each transition: the backup diagram is limited to only one state and its follower.\n\n::: {.callout-tip}\n## TD(0) policy evaluation\n\n* **while** True:\n\n    * Start from an initial state $s_0$.\n\n    * **foreach** step $t$ of the episode:\n\n        * Select $a_t$ using the current policy $\\pi$ in state $s_t$.\n\n        * Apply $a_t$, observe $r_{t+1}$ and $s_{t+1}$.\n\n        * Compute the TD error:\n\n        $$\\delta_t = r_{t+1} + \\gamma \\, V(s_{t+1}) - V(s_t)$$\n\n        * Update the state-value function of $s_t$:\n\n        $$\n            V(s_t) = V(s_t) + \\alpha \\, \\delta_t\n        $$\n\n        * **if** $s_{t+1}$ is terminal: **break**\n:::\n\nTD learns from experience in a fully incremental manner. It does not need to wait until the end of an episode. It is therefore possible to learn continuing tasks. TD converges to $V^{\\pi}$ if the step-size parameter $\\alpha$ is small enough. \n\nThe **TD error** is used to evaluate the policy:\n\n$$\n    V(s_t) = V(s_t) + \\alpha \\, (r_{t+1} + \\gamma \\, V(s_{t+1}) - V(s_t)) = V(s_t) + \\alpha \\, \\delta_t\n$$\n\nThe estimates converge to:\n\n$$V^\\pi(s) = \\mathbb{E}_\\pi [r(s, a, s') + \\gamma \\, V^\\pi(s')]$$\n\n\nBy using an **estimate of the return** $R_t$ instead of directly the return as in MC,  we **increase the bias** (estimates are always wrong, especially at the beginning of learning) but we **reduce the variance**: only $r(s, a, s')$ is stochastic, not the value function $V^\\pi$. We can therefore expect **less optimal solutions**, but we will also need **less samples**: better **sample efficiency** than MC but worse **convergence** (suboptimal).\n\nQ-values can be estimated in the same way:\n\n$$\n    Q(s_t, a_t) = Q(s_t, a_t) + \\alpha \\, (r_{t+1} + \\gamma \\, Q(s_{t+1}, a_{t+1}) - Q(s_t, a_t))\n$$\n\nLike for MC, the exploration/exploitation trade-off has to be managed: what is the next action $a_{t+1}$?  There are therefore two classes of TD control algorithms: **on-policy** (SARSA) and **off-policy** (Q-learning).\n\n\n### SARSA: On-policy TD control\n\n\n**SARSA** (state-action-reward-state-action) updates the value of a state-action pair by using the predicted value of the next state-action pair according to the current policy.\n\n![State-action-reward-state-action transitions. Source: [@Sutton1998]. ](../slides/img/sarsa-sequence.png){width=70%}\n\nWhen arriving in $s_{t+1}$ from $(s_t, a_t)$, we already sample the next action:\n\n$$a_{t+1} \\sim \\pi(s_{t+1}, a)$$\n\nWe can now update the value of $(s_t, a_t)$:\n\n$$\n    Q(s_t, a_t) = Q(s_t, a_t) + \\alpha \\, (r_{t+1} + \\gamma \\, Q(s_{t+1}, a_{t+1}) - Q(s_t, a_t))\n$$\n\nThe next action $a_{t+1}$ will **have to** be executed next: SARSA is **on-policy**. You cannot change your mind and execute another $a_{t+1}$. The learned policy must be $\\epsilon$-soft (stochastic) to ensure exploration. SARSA converges to the optimal policy if $\\alpha$ is small enough and if $\\epsilon$ (or $\\tau$) slowly decreases to 0.\n\n\n\n::: {.callout-tip}\n## SARSA: On-policy TD control\n\n* **while** True:\n\n    * Start from an initial state $s_0$ and select $a_0$ using the current policy $\\pi$.\n\n    * **foreach** step $t$ of the episode:\n\n        * Apply $a_{t}$, observe $r_{t+1}$ and $s_{t+1}$.\n\n        * Select $a_{t+1}$ using the current **stochastic** policy $\\pi$.\n\n        * Update the action-value function of $(s_t, a_t)$:\n\n        $$ Q(s_t, a_t) = Q(s_t, a_t) + \\alpha \\, (r_{t+1} + \\gamma \\, Q(s_{t+1}, a_{t+1})  - Q(s_t, a_t)) $$\n\n        * Improve the stochastic policy, e.g:\n\n        $$\n            \\pi(s_t, a) = \\begin{cases}\n                            1 - \\epsilon \\; \\text{if} \\; a = \\text{argmax} \\, Q(s_t, a) \\\\\n                            \\frac{\\epsilon}{|\\mathcal{A}(s_t) -1|} \\; \\text{otherwise.} \\\\\n                          \\end{cases}\n        $$\n\n        * **if** $s_{t+1}$ is terminal: **break**\n:::\n\n### Q-learning: Off-policy TD control\n\n**Q-learning** directly approximates the optimal action-value function $Q^*$ independently of the current policy, using the greedy action in the next state.\n\n$$Q(s_t, a_t) = Q(s_t, a_t) + \\alpha \\, (r_{t+1} + \\gamma \\, \\max_a Q(s_{t+1}, a) - Q(s_t, a_t))$$\n\nThe next action $a_{t+1}$ can be generated by a behavior policy: Q-learning is **off-policy**, but the learned policy can be deterministic. The behavior policy can be an $\\epsilon$-soft policy derived from $Q$ or expert knowledge.  The behavior policy only needs to visit all state-action pairs during learning to ensure optimality.\n\n::: {.callout-tip}\n## Q-learning: Off-policy TD control\n\n* **while** True:\n\n    * Start from an initial state $s_0$.\n\n    * **foreach** step $t$ of the episode:\n\n        * Select $a_{t}$ using the behavior policy $b$ (e.g. derived from $\\pi$).\n\n        * Apply $a_t$, observe $r_{t+1}$ and $s_{t+1}$.\n\n        * Update the action-value function of $(s_t, a_t)$:\n\n        $$Q(s_t, a_t) = Q(s_t, a_t) + \\alpha \\, (r_{t+1} + \\gamma \\, \\max_a Q(s_{t+1}, a) - Q(s_t, a_t))$$\n\n        * Improve greedily the learned policy:\n        \n        $$\\pi(s_t, a) = \\begin{cases}\n                        1\\; \\text{if} \\; a = \\text{argmax} \\, Q(s_t, a) \\\\\n                        0 \\; \\text{otherwise.} \\\\\n                      \\end{cases}$$\n\n\n        * **if** $s_{t+1}$ is terminal: **break**\n:::\n\n\nIn off-policy Monte-Carlo, Q-values are estimated using the return of the rest of the episode on average:\n\n$$Q^\\pi(s, a) = \\mathbb{E}_{\\tau \\sim \\rho_b}[\\rho_{0:T-1} \\, R(\\tau) | s_0 = s, a_0=a]$$\n\nAs the rest of the episode is generated by $b$, we need to correct the returns using the importance sampling weight. In Q-learning, Q-values are estimated using other estimates:\n\n$$Q^\\pi(s, a) = \\mathbb{E}_{s_t \\sim \\rho_b, a_t \\sim b}[ r_{t+1} + \\gamma \\, \\max_a Q^\\pi(s_{t+1}, a) | s_t = s, a_t=a]$$\n\nAs we only sample **transitions** using $b$ and not episodes, there is no need to correct the returns: the returns use estimates $Q^\\pi$, which depend on $\\pi$ and not $b$.\n\n\n\n::: {.callout-note}\n## Temporal Difference learning\n\n* **Temporal Difference** allow to learn Q-values from single transitions instead of complete episodes.\n\n* MC methods can only be applied to episodic problems, while TD works for continuing tasks.\n\n* MC and TD methods are **model-free**: you do not need to know anything about the environment ($p(s' |s, a)$ and $r(s, a, s')$) to learn.\n\n* The **exploration-exploitation** dilemma must be dealt with:\n\n    * **On-policy** TD (SARSA) follows the learned stochastic policy.\n\n    $$\n        Q(s, a) = Q(s, a) + \\alpha \\, (r(s, a, s') + \\gamma \\, Q(s', a') - Q(s, a))\n    $$\n\n    * **Off-policy** TD (Q-learning) follows a behavior policy and learns a deterministic policy.\n\n    $$\n        Q(s, a) = Q(s, a) + \\alpha \\, (r(s, a, s') + \\gamma \\, \\max_a Q(s', a) - Q(s, a))\n    $$\n\n* TD uses **bootstrapping** like DP: it uses other estimates to update one estimate. \n\n* Q-learning is the go-to method in tabular RL.\n:::\n\n\n\n## Actor-critic methods\n\n{{< youtube  6IyZ3BGmuSI >}}\n\n\nActor-critic methods are TD methods that have a separate memory structure to explicitly represent the policy independent of the value function. The policy $\\pi$ is implemented by the **actor**, because it is used to select actions. The estimated values $V(s)$ are implemented by the **critic**, because it criticizes the actions made by the actor. Learning is always **on-policy**: the critic must learn about and critique whatever policy is currently being followed by the actor.\n\n![Actor-critic architecture. Source: [@Sutton1998]. ](../slides/img/actorcritic.png){width=50%}\n\nThe critic computes the **TD error** or **1-step advantage** after each transition $(s_t, a_t, r_{t+1}, s_{t+1})$:\n\n$$\\delta_t = r_{t+1} + \\gamma \\, V(s_{t+1}) - V(s_t)$$\n\nThis scalar signal is the output of the critic and drives learning in both the actor and the critic. It tells us how good the action $a_t$ was compared to our expectation $V(s_t)$.\n\nWhen the advantage $\\delta_t > 0$, this means that the action lead to a better reward or a better state than what was expected by $V(s_t)$, which is a **good surprise**, so the action should be reinforced (selected again) and the value of that state increased.\n\nWhen $\\delta_t < 0$, this means that the previous estimation of $(s_t, a_t)$ was too high (**bad surprise**), so the action should be avoided in the future and the value of the state reduced.\n\n\nThe critic is updated using this scalar signal:\n\n$$ V(s_t) \\leftarrow V(s_t) + \\alpha \\, \\delta_t$$\n\nThe actor is updated according to this TD error signal. For example a softmax actor over preferences:\n\n$$p(s_t, a_t) \\leftarrow p(s_t, a_t) + \\beta \\, \\delta_t$$\n\n$$\\pi(s, a) = \\frac{\\exp{p(s, a)}}{\\sum_b \\exp{p(s, b)}}$$\n\n\nWhen $\\delta_t >0$, the preference is increased, so the probability of selecting it again increases. When $\\delta_t <0$, the preference is decreased, so the probability of selecting it again decreases. This is the equivalent of **reinforcement comparison** for bandits.\n\n::: {.callout-tip}\n## Actor-critic algorithm with preferences\n\n* Start in $s_0$. Initialize the preferences $p(s,a)$ for each state action pair and the critic $V(s)$ for each state.\n\n* **foreach** step $t$:\n\n    * Select $a_t$ using the **actor** $\\pi$ in state $s_t$:\n\n    $$\\pi(s_t, a) = \\frac{\\exp{p(s, a)}}{\\sum_b \\exp{p(s, b)}}$$\n\n    * Apply $a_t$, observe $r_{t+1}$ and $s_{t+1}$.\n\n    * Compute the TD error in $s_t$ using the **critic**:\n\n    $$\n        \\delta_t = r_{t+1} + \\gamma \\, V(s_{t+1}) - V(s_t)\n    $$\n\n    * Update the **actor**:\n\n    $$\n        p(s_t, a_t) \\leftarrow p(s_t, a_t) + \\beta \\, \\delta_t\n    $$\n\n    * Update the **critic**:\n\n    $$\n        V(s_t) \\leftarrow V(s_t) + \\alpha \\, \\delta_t\n    $$\n:::\n\n\n\nThe advantage of the separation between the actor and the critic is that now the actor can take any form (preferences, linear approximation, deep networks). It requires minimal computation in order to select the actions, in particular when the action space is huge or even continuous. It can learn stochastic policies, which is particularly useful in non-Markov problems.\n\n**It is obligatory to learn on-policy:**  the critic must evaluate the actions taken by the current actor and the actor must learn from the current critic, not \"old\" V-values.\n\n::: {.callout-note}\n## Value-based vs. policy-based algorithms\n\n* **Value-based** methods use value estimates $Q_t(s, a)$ to infer a policy:\n\n    * **On-policy** methods learn and use a stochastic policy to explore.\n\n    * **Off-policy** methods learn a deterministic policy but use a (stochastic) behavior policy to explore.\n\n* **Policy-based** methods directly learn the policy $\\pi_t(s, a)$ (**actor**) using preferences or function approximators.\n\n    * A **critic** learning values is used to improve the policy w.r.t a performance baseline.\n\n    * Actor-critic architectures are strictly **on-policy**.\n\n|               | Bandits       | MDP          | \n|:-------------:|:-------------:|:------------:|\n| **Value-based**   |               |              |\n| $\\qquad$On-policy |$\\epsilon$-greedy, softmax | SARSA  |\n| $\\qquad$Off-policy | greedy  | Q-learning |\n| **Policy-based**  | | |\n| $\\qquad$On-policy | Reinforcement comparison  |  Actor-critic |\n\n:::\n\n\n\n## Eligibility traces and advantage estimation\n\n{{< youtube  Coe9U4bv-nI >}}\n\nMC has **high variance, zero bias**: it has good convergence properties and we are more likely to find the optimal policy. It is not very sensitive to initial estimates, and very simple to understand and use.\n\nTD has **low variance, some bias**, so it is usually more **sample efficient** than MC. TD(0) converges to $V^\\pi(s)$ (but not always with function approximation). The policy might be suboptimal. It is more sensitive to initial values (bootstrapping).\n\n![Gridworld environment. Source: [@Sutton1998]. ](../slides/img/gridworld-lambda.png){width=70%}\n\nWhen the reward function is sparse (e.g. only at the end of a game), only the last action, leading to that reward, will be updated the first time in TD.\n\n$$\n    Q(s, a) = Q(s, a) + \\alpha \\, (r(s, a, s') + \\gamma \\, \\max_a Q(s', a) - Q(s, a))\n$$\n\nThe previous actions, which were equally important in obtaining the reward, will only be updated the next time they are visited. This makes learning very slow: if the path to the reward has $n$ steps, you will need to repeat the same episode at least $n$ times to learn the Q-value of the first action. \n\n### n-step returns\n\n![n-step returns. Source: [@Sutton1998]. ](../slides/img/nstep.png){width=70%}\n\nOptimally, we would like a trade-off between: \n\n* TD (only one state/action is updated each time, small variance but significant bias)\n* Monte-Carlo (all states/actions in an episode are updated, no bias but huge variance).\n\nIn **n-step TD prediction**, the next $n$ rewards are used to estimate the return, the rest is approximated.\nThe **n-step return** is the discounted sum of the $n$ next rewards is computed as in MC plus the predicted value at step $t+n$ which replaces the rest as in TD.\n\n$$\n    R^n_t = \\sum_{k=0}^{n-1} \\gamma^{k} \\, r_{t+k+1} + \\gamma^n \\,  V(s_{t+n}) \n$$\n\nWe can update the value of the state with this n-step return:\n\n$$\n    V(s_t) = V(s_t) + \\alpha \\, (R^n_t - V (s_t))\n$$\n\nThe **n-step advantage** at time $t$ is:\n\n$$\nA^n_t = \\sum_{k=0}^{n-1} \\gamma^{k} \\, r_{t+k+1} + \\gamma^n \\,  V(s_{t+n}) - V (s_t)\n$$\n\nIt is easy to check that the **TD error** is the 1-step advantage:\n\n$$\n    \\delta_t = A^1_t = r_{t+1} + \\gamma \\, V(s_{t+1}) - V(s_t)\n$$\n\nAs you use more \"real\" rewards, you **reduce the bias** of Q-learning. As you use estimates for the rest of the episode, you **reduce the variance** of MC methods. But how to choose $n$?\n\n\n### Eligibility traces\n\nOne solution is to **average** the n-step returns, using a discount factor $\\lambda$ :\n\n$$R^\\lambda_t = (1  - \\lambda) \\, \\sum_{n=1}^\\infty \\lambda^{n-1} \\, R^n_t$$\n\n![$\\lambda$-returns are averages of all n-step returns. Source: [@Sutton1998]. ](../slides/img/eligibility-forward.png){width=60%}\n\nThe term $1- \\lambda$ is there to ensure that the coefficients $\\lambda^{n-1}$ sum to one.\n\n$$\\sum_{n=1}^\\infty \\lambda^{n-1} = \\dfrac{1}{1 - \\lambda}$$\n\n\nEach reward $r_{t+k+1}$ will count multiple times in the $\\lambda$-return. Distant rewards are discounted by $\\lambda^k$ in addition to $\\gamma^k$.\n\n![$\\lambda$ controls the importance of large n-step returns. Source: [@Sutton1998]. ](../slides/img/eligibility-forward-decay.png){width=70%}\n\nLarge n-step returns (MC) should not have as much importance as small ones (TD), as they have a high variance.\n\n\nTo understand the role of $\\lambda$, let's split the infinite sum w.r.t the end of the episode at time $T$. n-step returns with $n \\geq T$ all have a MC return of $R_t$:\n\n$$R^\\lambda_t = (1  - \\lambda) \\, \\sum_{n=1}^{T-t-1} \\lambda^{n-1} \\, R^n_t + \\lambda^{T-t-1} \\, R_t$$\n\n$\\lambda$ controls the bias-variance trade-off:\n\n* If $\\lambda=0$, the $\\lambda$-return is equal to $R^1_t = r_{t+1} + \\gamma \\, V(s_{t+1})$, i.e. TD: high bias, low variance.\n* If $\\lambda=1$, the $\\lambda$-return is equal to $R_t = \\sum_{k=0}^{\\infty} \\gamma^{k} \\, r_{t+k+1}$, i.e. MC: low bias, high variance.\n\nThis **forward view** of eligibility traces implies to look at all future rewards until the end of the episode to perform a value update. This prevents online learning using single transitions.\n\n![Forward view of eligibility traces. Source: [@Sutton1998]. ](../slides/img/eligibility-forward-view.png){width=70%}\n\nAnother view on eligibility traces is that the  **TD reward prediction error** at time $t$ is sent backwards in time:\n\n$$\n \\delta_t = r_{t+1} + \\gamma V(s_{t+1}) - V(s_t)\n$$\n\n![Backward view of eligibility traces. Source: [@Sutton1998]. ](../slides/img/eligibility-backwards.png){width=70%}\n\nEvery state $s$ previously visited during the episode will be updated proportionally to the current TD error and an **eligibility trace** $e_t(s)$:\n\n$$\n    V(s) \\leftarrow V(s) + \\alpha \\, \\delta_t \\, e_t(s)\n$$\n\nThe eligibility trace defines since how long the state was visited:\n\n$$\n    e_t(s) = \\begin{cases}\n                \\gamma \\, \\lambda \\, e_{t-1}(s) \\qquad\\qquad \\text{if} \\quad s \\neq s_t \\\\\n                e_{t-1}(s) + 1 \\qquad \\text{if} \\quad s = s_t \\\\\n            \\end{cases}\n$$\n\n\n![Updating of eligibility traces. Source: [@Sutton1998]. ](../slides/img/traces.png){width=70%}\n\n$\\lambda$ defines how important is a future TD error for the current state.\n\n\n\n::: {.callout-tip}\n## TD($\\lambda$) algorithm: policy evaluation\n\n* **foreach** step $t$ of the episode:\n\n    * Select $a_t$ using the current policy $\\pi$ in state $s_t$, observe $r_{t+1}$ and $s_{t+1}$.\n\n    * Compute the TD error in $s_t$:\n\n    $$\n        \\delta_t = r_{t+1} + \\gamma \\, V_k(s_{t+1}) - V_k(s_t)\n    $$\n\n    * Increment the trace of $s_t$:\n\n    $$\n        e_{t+1}(s_t) = e_t(s_t) + 1\n    $$\n\n    * **foreach** state $s \\in [s_o, \\ldots, s_t]$ in the episode:\n\n        * Update the state value function:\n\n        $$\n            V_{k+1}(s) = V_k(s) + \\alpha \\, \\delta_t \\, e_t(s)\n        $$\n\n        * Decay the eligibility trace:\n\n        $$\n            e_{t+1}(s) = \\lambda \\, \\gamma \\, e_t(s)\n        $$\n\n    * **if** $s_{t+1}$ is terminal: **break**\n:::\n\n\nThe backward view of eligibility traces can be applied on single transitions, given we know the history of visited states and maintain a trace for each of them. Eligibility traces are a very useful way to speed learning up in TD methods and control the bias/variance trade-off. This modification can be applied to all TD methods: TD($\\lambda$) for states, SARSA($\\lambda$) and Q($\\lambda$) for actions.\n\nThe main drawback is that we need to keep a trace for ALL possible state-action pairs: memory consumption. Clever programming can limit this issue. The value of $\\lambda$ has to be carefully chosen for the problem: perhaps initial actions are random and should not be reinforced. If your problem is not strictly Markov (POMDP), eligibility traces can help as they update the history!\n\n\n\n### Generalized advantage estimation (GAE)\n\nThe **n-step advantage** at time $t$:\n\n$$\nA^n_t = \\sum_{k=0}^{n-1} \\gamma^{k} \\, r_{t+k+1} + \\gamma^n \\,  V(s_{t+n}) - V (s_t)\n$$\n\ncan be written as function of the TD error of the next $n$ transitions:\n\n$$\n    A^{n}_t = \\sum_{l=0}^{n-1} \\gamma^l \\, \\delta_{t+l}\n$$\n\n::: {.callout-note}\n## Proof with $n=2$:\n\n$$\\begin{aligned}\nA^2_t &= r_{t+1} + \\gamma \\, r_{t+2} + \\gamma^2 \\, V(s_{t+2}) - V(s_{t}) \\\\\n&\\\\\n&= (r_{t+1} - V(s_t)) + \\gamma \\, (r_{t+2} + \\gamma \\, V(s_{t+2}) ) \\\\\n&\\\\\n&= (r_{t+1} + \\gamma \\, V(s_{t+1}) - V(s_t)) + \\gamma \\, (r_{t+2} + \\gamma \\, V(s_{t+2}) - V(s_{t+1})) \\\\\n&\\\\\n&= \\delta_t + \\gamma \\, \\delta_{t+1}\n\\end{aligned}\n$$\n:::\n\nThe **n-step advantage** realizes a bias/variance trade-off, but which value of $n$ should we choose?\n\n$$\nA^n_t = \\sum_{k=0}^{n-1} \\gamma^{k} \\, r_{t+k+1} + \\gamma^n \\,  V(s_{t+n}) - V (s_t)\n$$\n\nSchulman et al. (2015) [@Schulman2015a] proposed a **generalized advantage estimate** (GAE) $A_t^{\\text{GAE}(\\gamma, \\lambda)}$ summing all possible n-step advantages with a discount parameter $\\lambda$:\n\n$$A_t^{\\text{GAE}(\\gamma, \\lambda)} = (1 - \\lambda) \\sum_{n=1}^\\infty \\lambda^n \\, A^n_t$$\n\nThis is just a forward eligibility trace over distant n-step advantages: the 1-step advantage is more important the the 1000-step advantage (too much variance). We can show that the GAE can be expressed as a function of the future 1-step TD errors:\n\n$$A_t^{\\text{GAE}(\\gamma, \\lambda)} = \\sum_{k=0}^\\infty (\\gamma \\, \\lambda)^k \\, \\delta_{t+k}$$\n\nThe parameter $\\lambda$ controls the **bias-variance** trade-off.\n\n* When $\\lambda=0$, the generalized advantage is the TD error:\n\n$$A_t^{\\text{GAE}(\\gamma, 0)} = r_{t+1} + \\gamma \\, V(s_{t+1}) - V(s_t)  = \\delta_{t}$$\n\n* When $\\lambda=1$, the generalized advantage is the MC advantage:\n\n$$A_t^{\\text{GAE}(\\gamma, 1)} = \\sum_{k=0}^\\infty \\gamma^k \\, r_{t+k+1} - V(s_t) = R_t - V(s_t)$$\n\nAny value in between controls the bias-variance trade-off: from the high bias / low variance of TD to the small bias / high variance of MC. In practice, it leads to a better estimation than n-step advantages, but is more computationally expensive.\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../center_images.lua","quarto"],"number-sections":false,"toc":true,"html-math-method":"katex","output-file":"2.5-TD.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.251","bibliography":["../DeepLearning.bib","../ReinforcementLearning.bib"],"csl":"../frontiers.csl","theme":["cosmo","../custom.scss"],"page-layout":"full","number-depth":2,"smooth-scroll":true},"extensions":{"book":{"multiFile":true}}}}}